#환경 정의 
#데이터 및 각종 지표 계산
#에이전트와 상호작용

class Env:   
    def __init__(self): 
        pass
        
    def stock_select(self,coin_or_stock): #종목을 정하는 함수
        #현재는 비트코인으로 수동설정이며 향후 주식,코인을 통틀어 알고리즘에 의한 종목 선택을 할예정
        if coin_or_stock=='coin':
            name_='KRW-BTC'  #비트코인
        if coin_or_stock=='stock':
            name_='SPY'   # SPY SP500: SPY     KINDEX SP500:'360200'    Tiger SP500:'360750'    삼성전자'005930'            
        return name_
    
    def data_create(self,  #데이터 호출 함수
                    minute, #분봉
                    data_count,#불러올 데이터수 (코인)
                    coin_or_stock   ):  
        
        exchange=1180 #환율
        name_=self.stock_select(coin_or_stock)
        print('종목선정완료',name_)
        
        if coin_or_stock=='coin': #코인일경우
            #코인데이터 호출
            date = None #초기에 None이면 최근 200개 호출
            dfs = [ ]
            for i in range(data_count // 200 + 1):
                if i < data_count // 200 :
                    df = py.get_ohlcv(name_, to = date, interval = 200) #date 까지 200개 호출
                    if i%2==0:  #오류방지위해 텀 부여
                        time.sleep(0.1)
                    date = df.index[0]
                elif data_count % 200 != 0 :    #최근 200개
                    df = py.get_ohlcv(name_, to = date, interval = 200, count = data_count % 200)
                else :
                    break
                dfs.append(df)
                time.sleep(0.1)
                
            data = pd.concat(dfs).sort_index()      #하나의 데이터 프레임으로 묶음
            close_=pd.Series(data['close'].values)
            vol_=pd.Series(data['volume'].values)
            
                
        if coin_or_stock=='stock': #주식일경우
            try:  #한국,해외주식 포함
                data=fd.DataReader(name_,start='2016',end='2021')
                len_data=len(data)
                data_=data[len(data)-data_count:]
                close_=pd.Series(data_['Close'].values)*exchange
                vol_=pd.Series(data_['Volume'].values)/exchange
                
            except:
                df_stock=pd.DataFrame()
                code=name_
                count = str(data_count)
                #주가 일수에 따라 url 정의
                url = f'https://fchart.stock.naver.com/sise.nhn?symbol={code}&timeframe=day&count={count}&requestType=0'
                # 제이슨 파일 형태로 데이터 가지고 옴
                rs = requests.get(url)
                dt = xmltodict.parse(rs.text)
                js = json.dumps(dt,indent = 4)
                js = json.loads(js)

                # 제이슨 파일를 모두 데이터 프레임 형태로 가지고 옴
                data = pd.json_normalize(js['protocol']['chartdata']['item'])
                df = data['@data'].str.split('|',expand = True)
                df.columns = ['날짜','시작가','최고가','최저가','종가','거래량']
                df["종목코드"] = code
                df_stock = df_stock.append(df)

                # 날짜는 스트링으로 이동평균등을 계산위해 날짜 타입으로 변경 
                df_stock["날짜"] = pd.to_datetime(df["날짜"])
                data=df_stock

                close_=pd.Series(data['종가'].values)*exchange
                vol_=pd.Series(data['거래량'].values)/exchange
        
        scaler = MinMaxScaler()     #0-1사이로 정규화
        close_1=scaler.fit_transform(close_.values.reshape(-1,1))  
        vol_1=scaler.fit_transform(vol_.values.reshape(-1,1))

        close_=close_      #스케일링 이전 데이터
        vol_=vol_

        close_1=close_1.reshape(-1)    #스케일링 데이터
        vol_1=vol_1.reshape(-1)

        return close_,vol_,close_1,vol_1

                
        
        
        
    def log_return(self,close):    #종가의 로그리턴을 구하는 함수
        #log_return= log(Pt+1)-log(Pt)
        
        series= pd.DataFrame(close)
        log_re=[0]   #다른지표와 인덱스를 맞추기위해 초기에 0을 넣는다
        
        for t in range(len(close)-1):
            return_=np.log(series.iloc[t+1])-np.log(series.iloc[t])
            log_re.append(round(float(return_),5))
            
        log_nan=1 # 0값 제외 시키기위한 인덱스
        log_re=np.array(log_re)
        return log_re,log_nan
            
            
        
    def sto_RSI(self,close,vol,sto_period): #지표 stochastic RSI 를 구하는 함수(업비트버전 sto_RSI 공식이다)
        
        #기존 rsi가 아닌 업비트용 rsi공식을 사용했다.
        #data close와 volume 데이터 리스트
        #sto_period=지표의 윈도우 기간
        
        close_,vol_= close,vol
        
        series2=pd.DataFrame(close_)
        series=pd.Series(series2[0].values)
        
        period=sto_period
        smoothK=3
        smoothD=3

        delta = series.diff().dropna()
        ups = delta * 0
        downs = ups.copy()
        ups[delta > 0] = delta[delta > 0]
        downs[delta < 0] = -delta[delta < 0]
        
        ups[ups.index[period-1]] = np.mean( ups[:period] )
        ups = ups.drop(ups.index[:(period-1)])
        downs[downs.index[period-1]] = np.mean( downs[:period] )
        downs = downs.drop(downs.index[:(period-1)])
        rs = ups.ewm(com=period-1,min_periods=0,adjust=False,ignore_na=False).mean() / \
             downs.ewm(com=period-1,min_periods=0,adjust=False,ignore_na=False).mean() 
        rsi = 100 - 100 / (1 + rs)
        
        stochrsi  = (rsi - rsi.rolling(period).min()) / (rsi.rolling(period).max() - rsi.rolling(period).min())
        stochrsi_K = stochrsi.rolling(smoothK).mean()
        stochrsi_D = stochrsi_K.rolling(smoothD).mean()
        
        sto_rsi=stochrsi_D.iloc[-1]
        total_sto=stochrsi_D[:]
        
        sto_idx=total_sto.dropna()
        nan_idx=sto_idx.index[0]   
        #nan값의 갯수가된다. 바로 제거하지않는것은
        #추후 여러 지표들의 인덱스를 유지하며 nan을 효과적으로 한번에 제거하기위해 사용한다
        
        total_sto=pd.concat([pd.Series(np.zeros(nan_idx)),sto_idx],axis=0) #앞의 비워진 인덱스들과 값들을 0으로 채운다
        total_sto=total_sto.values.reshape(-1)
                             
        return total_sto,nan_idx
    
    
    def VR(self,vr_period,data,Vol_):   #거래비율을 구하는 함수
        # volume Ratio 계산
        
        #VR=((N일간 상승일 거래량의 합)/(N일간 하락일 거래량의 합))*100
        period=vr_period
        series1= data
        series2=pd.DataFrame(series1)
        series=pd.Series(series2[0].values)
        series=series.diff().dropna()
        
        Volume1=Vol_
        Volume2=pd.DataFrame(Volume1)
        Volume=pd.Series(Volume2[0].values)

        ups=Volume*0
        down=Volume*0

        ups_index=series.index[series>0]
        down_index=series.index[series<0]

        ups[ups_index]=Volume[ups_index]
        down[down_index]=Volume[down_index]

        Volume_plus=ups.rolling(period).sum()
        Volume_minus1=down.rolling(period).sum()
        Volume_minus=np.abs(Volume_minus1)
        Volume_minus[Volume_minus==0]=1e-5 # inf값을 방지
        VR=(Volume_plus/Volume_minus)
        
        VR_idx=VR.dropna()
        nan_idx=VR_idx.index[0]   
        #nan값의 갯수가된다 즉 마지막nan값의 순번이다. 추후 지표들의 인덱스를 유지하며 nan을 효과적으로 제거하기위해 사용한다
        
        VR=pd.concat([pd.Series(np.zeros(nan_idx)),VR_idx],axis=0) #앞의 비워진 인덱스들과 값들을 0으로 채운다
        VR=VR.values.reshape(-1)
        
        scaler=MinMaxScaler()
        VR=scaler.fit_transform(VR.reshape(-1,1))
        VR=pd.Series(VR.reshape(-1))
        
        return VR,nan_idx
    
    
    def trading_mind(self,tm_period,data): #투자심리도를 구하는 함수
        period2=tm_period
        series1= data
        series2=pd.DataFrame(series1)
        series=pd.Series(series2[0].values)
        series=series.diff().dropna()
        series=(series/np.abs(series)).fillna(0)
        
        up= series*0
        down= series*0
        
        up[series>0] = series[series>0]
        down[series<0]= series[series<0]
        
        up_count=up.rolling(period2).sum()
        up_mean= up_count/period2
        
        
        up_mean_idx=up_mean.dropna()
        nan_idx=up_mean_idx.index[0]   #nan값의 갯수가된다. 추후 지표들의 인덱스를 유지하며 nan을 효과적으로 제거하기위해 사용한다
        
        up_mean=pd.concat([pd.Series(np.zeros(nan_idx)),up_mean_idx],axis=0) #앞의 비워진 인덱스들과 값들을 0으로 채운다
        up_mean=up_mean.values.reshape(-1)
        
        return up_mean ,nan_idx
    
    
    
    def distribute_data(self,input_,ratio): #훈련,검증,테스트 셋으로 나눔 , ratio 인풋= 비율의 리스트
                                       #ratio= train과 val test 비율
        step_ratio,_=divmod(len(input_),(ratio[0]+ratio[1]+ratio[2]))
        train_ratio=step_ratio*ratio[0]
        val_ratio=step_ratio*ratio[1]
        test_ratio=step_ratio*ratio[2]
        
        train_data=input_[:train_ratio].view(-1,1)
        val_data= input_[train_ratio:train_ratio+val_ratio].view(-1,1)
        test_data= input_[train_ratio+val_ratio:].view(-1,1)
        
        return train_data, val_data, test_data
        
    
    
    def PCA(self,data_,num):   #주성분 분석을 실행하는 함수
        pca = PCA(n_components=num) #주성분 갯수
        pca_result = pca.fit_transform(data_)
        
        col=[]
        for k in range(num):
            col.append('columns')
            
        PCA_ = pd.DataFrame(data=pca_result, columns = col)
        PCA_explain=pca.explained_variance_ratio_
        
        
        return pca_result,PCA_explain
    
    
    
    def input_create(self,minute,#minute:분봉
                     sto_period,#sto_period: stochastic rsi의 기간
                     vr_period,#vr_period: volume ratio의 기간
                     tm_period,#tm_period : 투자심리도의 기간
                     ratio, #ratio는 데이터셋 비율을 리스트로 넣음
                     day_count, #데이터수
                     coin_or_stock, #coin or stock
                     LPPL_MODEL #LPPL클래스
                    ):   #인풋 전처리 함수
        
        
        close_,vol_,close_scale,vol_scale= self.data_create(minute,day_count,coin_or_stock)         #close와 vol데이터를 가져온다. (0-1사이로스케일링된 데이터도 가져온다)
        total_sto,sto_nan= self.sto_RSI(close_scale,vol_scale,sto_period)   #stochastic rsi 지표를 계산한다
        VR,VR_nan= self.VR(vr_period,close_scale,vol_scale)                 #Volume Ratio 지표를 계산한다
        tm,tm_nan= self.trading_mind(tm_period,close_)                      #투자심리도를 계산한다
        pos,neg=LPPL_MODEL(range(len(close_)),close_)                       #LPPL 계산
        log_re,log_nan=self.log_return(close_)    #종가의 로그리턴을 구하는 함수
        
        #feature 들의 기간을 똑같이 맞춘다
        len_sto=len(total_sto)
        close_len=len(close_scale)
        vr_len=len(VR)
        tm_len=len(tm)
        log_len=len(log_re)
        start_period=max(sto_nan,VR_nan,tm_nan,log_nan) #각 지표의 초기 Nan값을 제거하고 인덱스를 맞추기위해 dropna 대신 설정한다 
        
        close=torch.Tensor(np.array(close_[start_period:]))
        #observation clipping (PPO2)
        close_sc=torch.clamp(torch.Tensor(np.array(close_scale[start_period:])),-1,1)
        total_sto=torch.clamp(torch.Tensor(np.array(total_sto[start_period:])),-1,1)
        VR=torch.clamp(torch.Tensor(np.array(VR[start_period:])),-1,1)
        tm=torch.clamp(torch.Tensor(np.array(tm[start_period:])),-1,1)
        lppl_pos=torch.clamp(torch.Tensor(pos[start_period:]),-1,1)
        log_return= torch.clamp(torch.Tensor(log_re[start_period:]),-1,1)
        
        #train,val,test set 으로 나눈다
        train_close_,val_close_,test_close_=self.distribute_data(close,ratio)
        train_close,val_close,test_close=self.distribute_data(close_sc,ratio)
        train_sto,val_sto,test_sto=self.distribute_data(total_sto,ratio)
        train_VR,val_VR,test_VR=self.distribute_data(VR,ratio)
        train_tm,val_tm,test_tm=self.distribute_data(tm,ratio)
        train_lppl,val_lppl,test_lppl=self.distribute_data(lppl_pos,ratio)
        train_log,val_log,test_log=self.distribute_data(log_return,ratio)
        
        
        #feature들을 가진 input을 생성한다
        train_data=[train_close,train_sto,train_VR,train_tm,train_lppl,train_log]
        val_data=[val_close,val_sto,val_VR,val_tm,val_lppl,val_log]
        test_data=[test_close,test_sto,test_VR,test_tm,test_lppl,test_log]
        ori_close=[train_close_,val_close_,test_close_]
        
        return train_data,val_data,test_data,ori_close         #스케일링된 data들과 기존 종가(close) 데이터가 나옴
        
    
    
#--------------------------------------- RL에이전트 -------------------------------------


    def LSTM_observation(self,input_,window,input_dim):    #윈도우사이즈만큼 텐서형태로 출력 LSTM인풋 데이터로 만듦
        window_size=window
        data=[]
        input_=input_
        for k in range(len(input_[0])-(window_size-1)):
            for dim_idx in range(input_dim):
                data.append(input_[dim_idx][k:k+window_size])
        data=torch.Tensor(torch.cat(data).view(-1,input_dim,window))
        #batch first 일경우      (배치길이(총길이), 디멘션, 시퀀스길이(윈도우사이즈))
        
        return data
    
    
    def CNN_observation(self,input_,dim):     #CNN인풋 데이터로 만든다
                                           # 배치 크기 × 채널 × 높이(height) × 너비(widht)의 크기의 텐서를 선언
        data=input_.view(1,dim,1,-1)
        
        return data
   

    def discrete_step(self,action,unit,step,model): #에이전트의 액션이 discrete할때 보상을 결정하는 함수
        #액션0= 매도 1=관망  2=매수
        #참고 Deep Reinforcement Learning for Automated Stock Trading: An Ensemble Strategy 논문
        
        action=action.item()
        if action==0: #매도일경우 
            if model.stock>=unit[0]:  #주식의 갯수가 팔려는 갯수이상일때만 매도
                model.stock-=unit[0]
                model.cash+=model.price*unit[0]
                
            elif model.stock>0: 
                #가진주식수 부족한데 팔주식은 있는경우
                model.cash+=model.stock*model.price  #전량매도
                unit[0]=model.stock
                model.stock-=unit[0]
                
            else:
                unit[0]=0
            
        elif action==2: #매수일경우
            if model.cash>=unit[2]*model.price:   #가진현금이 사려고하는 가격보다 많을때
                model.stock+=unit[2]
                model.cash-=model.price*unit[2]
            elif model.cash>model.price:                              #유닛대비 현금부족
                quotient,remainder=divmod(float(model.cash),float(model.price))  #몫과 나머지
                model.stock+=quotient
                model.cash-=quotient*model.price
                unit[2]=quotient   
            else:                                      #1주도 못사는경우 
                unit[2]=0
            
        else: #관망일경우
            model.cash=model.cash
            model.stock=model.stock
                    
        #Rs=다음스테이트에서 팔았을때 리워드
        #Rh="홀딩했을때
        #Rb="매수했을때
        Rs=((model.price_data[step+1]-model.price_data[step])/model.price_data[step+1])*(unit[0])  #reward scaling (MInmaxscaler 사용시 분포의 표준편차가 변함)  
        Rh=((model.price_data[step+1]-model.price_data[step])/model.price_data[step+1])*(unit[1])
        Rb=((model.price_data[step+1]-model.price_data[step])/model.price_data[step+1])*(unit[2])    
        
     

        reward=torch.Tensor(Rh-Rs+Rb-((Rs)*model.cost))
        reward= torch.clip(reward,-10,10)  #reward clipping [-10,10]
        cost=(unit[0]*model.price)*model.cost
        model.cash-=cost    #매도시 수수료를 지불
        model.PV=(model.stock*model.price+model.cash) #PV업데이트
        
        #현방식의 reward 계산 이유 : next time step 에서 가격이 증가하거나 감소할때 PV를 개선하기위함 
        #추가소견:에이전트의 현시점 시장 대응력을 향상
        # MA 환경이므로 Env가 아닌 에이전트 클래스에 액션 ,리워드 ,스테이트 데이터 저장
        
        
        model.action_data.append(action)
        model.reward_data.append(reward)  
        model.step_data.append(step)
            
        return action,reward,step
